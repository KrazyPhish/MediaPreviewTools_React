/** Declaration file generated by dts-gen */

export = Viewer;

declare class Viewer {
    constructor(element: any, options: Partial<{
        /**
         * Enable a modal backdrop, specify `static` for a backdrop
         * which doesn't close the modal on click.
         * @type {boolean}
         */
        backdrop: boolean,
        /**
         * Show the button on the top-right of the viewer.
         * @type {boolean}
         */
        button: boolean,
        /**
         * Show the navbar.
         * @type {boolean | number}
         */
        navbar: boolean,
        /**
         * Specify the visibility and the content of the title.
         * @type {boolean | number | Function | Array}
         */
        title: boolean,
        /**
         * Show the toolbar.
         * @type {boolean | number | Object}
         */
        toolbar: boolean,
        /**
         * Custom class name(s) to add to the viewer's root element.
         * @type {string}
         */
        className: string,
        /**
         * Define where to put the viewer in modal mode.
         * @type {string | Element}
         */
        container: string | Element,
        /**
         * Filter the images for viewing. Return true if the image is viewable.
         * @type {Function}
         */
        filter: Function,
        /**
         * Enable to request fullscreen when play.
         * {@link https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions}
         * @type {boolean | FullscreenOptions}
         */
        fullscreen: boolean | FullscreenOptions,
        /**
         * Define the extra attributes to inherit from the original image.
         * @type {Array}
         */
        inheritedAttributes: ['crossOrigin', 'decoding', 'isMap', 'loading', 'referrerPolicy', 'sizes', 'srcset', 'useMap'],
        /**
         * Define the initial coverage of the viewing image.
         * @type {number}
         */
        initialCoverage: number,
        /**
         * Define the initial index of the image for viewing.
         * @type {number}
         */
        initialViewIndex: number,
        /**
         * Enable inline mode.
         * @type {boolean}
         */
        inline: boolean,
        /**
         * The amount of time to delay between automatically cycling an image when playing.
         * @type {number}
         */
        interval: number,
        /**
         * Enable keyboard support.
         * @type {boolean}
         */
        keyboard: boolean,
        /**
         * Focus the viewer when initialized.
         * @type {boolean}
         */
        focus: boolean,
        /**
         * Indicate if show a loading spinner when load image or not.
         * @type {boolean}
         */
        loading: boolean,
        /**
         * Indicate if enable loop viewing or not.
         * @type {boolean}
         */
        loop: boolean,
        /**
         * Min width of the viewer in inline mode.
         * @type {number}
         */
        minWidth: number,
        /**
         * Min height of the viewer in inline mode.
         * @type {number}
         */
        minHeight: number,
        /**
         * Enable to move the image.
         * @type {boolean}
         */
        movable: boolean,
        /**
         * Enable to rotate the image.
         * @type {boolean}
         */
        rotatable: boolean,
        /**
         * Enable to scale the image.
         * @type {boolean}
         */
        scalable: boolean,
        /**
         * Enable to zoom the image.
         * @type {boolean}
         */
        zoomable: boolean,
        /**
         * Enable to zoom the current image by dragging on the touch screen.
         * @type {boolean}
         */
        zoomOnTouch: boolean,
        /**
         * Enable to zoom the image by wheeling mouse.
         * @type {boolean}
         */
        zoomOnWheel: boolean,
        /**
         * Enable to slide to the next or previous image by swiping on the touch screen.
         * @type {boolean}
         */
        slideOnTouch: boolean,
        /**
         * Indicate if toggle the image size between its natural size
         * and initial size when double click on the image or not.
         * @type {boolean}
         */
        toggleOnDblclick: boolean,
        /**
         * Show the tooltip with image ratio (percentage) when zoom in or zoom out.
         * @type {boolean}
         */
        tooltip: boolean,
        /**
         * Enable CSS3 Transition for some special elements.
         * @type {boolean}
         */
        transition: boolean,
        /**
         * Define the CSS `z-index` value of viewer in modal mode.
         * @type {number}
         */
        zIndex: number,
        /**
         * Define the CSS `z-index` value of viewer in inline mode.
         * @type {number}
         */
        zIndexInline: number,
        /**
         * Define the ratio when zoom the image by wheeling mouse.
         * @type {number}
         */
        zoomRatio: number,
        /**
         * Define the min ratio of the image when zoom out.
         * @type {number}
         */
        minZoomRatio: number,
        /**
         * Define the max ratio of the image when zoom in.
         * @type {number}
         */
        maxZoomRatio: number,
        /**
         * Define where to get the original image URL for viewing.
         * @type {string | Function}
         */
        url: string | Function,
        /**
         * Event shortcuts.
         * @type {Function}
         */
        ready: Function,
        show: Function,
        shown: Function,
        hide: Function,
        hidden: Function,
        view: Function,
        viewed: Function,
        move: Function,
        moved: Function,
        rotate: Function,
        rotated: Function,
        scale: Function,
        scaled: Function,
        zoom: Function,
        zoomed: Function,
        play: Function,
        stop: Function
    }>, ...args);

    bind(): void;

    build(): void;

    change(event: any): void;

    clearEnforceFocus(): void;

    click(event: any): void;

    close(): void;

    dblclick(event: any): void;

    destroy(): any;

    dragstart(event: any): void;

    enforceFocus(): void;

    exit(): any;

    exitFullscreen(): void;

    full(): any;

    getImageURL(image: any): any;

    hidden(): void;

    hide(...args: any[]): any;

    init(): void;

    initBody(): void;

    initContainer(): void;

    initImage(done: any): void;

    initList(): void;

    initViewer(): void;

    isSwitchable(): any;

    keydown(event: any): void;

    load(): void;

    loadImage(event: any): void;

    move(x: any, ...args: any[]): any;

    moveTo(x: any, ...args: any[]): any;

    next(...args: any[]): any;

    open(): void;

    play(...args: any[]): any;

    pointerdown(event: any): void;

    pointermove(event: any): void;

    pointerup(event: any): void;

    prev(...args: any[]): any;

    render(): void;

    renderImage(done: any): void;

    renderList(): void;

    renderViewer(): void;

    requestFullscreen(options: any): void;

    reset(): any;

    resetImage(): void;

    resetList(): void;

    resize(): void;

    rotate(degree: any): any;

    rotateTo(degree: any): any;

    scale(scaleX: any, ...args: any[]): any;

    scaleX(_scaleX: any): any;

    scaleY(_scaleY: any): any;

    show(...args: any[]): any;

    shown(): void;

    stop(): any;

    toggle(...args: any[]): any;

    tooltip(): any;

    unbind(): void;

    update(): any;

    view(...args: any[]): any;

    wheel(event: any): void;

    zoom(ratio: any, ...args: any[]): any;

    zoomTo(ratio: any, ...args: any[]): any;

    static noConflict(): any;

    static setDefaults(options: any): void;

}

